name: Sensor Monitoring FE CI/CD

on:
  push:
    branches:
      - main # Trigger on push to the main branch
  pull_request:
    types: [closed]
    branches:
      - main # Trigger on pull request accepted to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Debug SSH Connection with Temporary Key File
      # - name: Debug SSH Connection
      #   run: |
      #     echo "${{ secrets.VPS_SSH_KEY }}" > ssh_key
      #     chmod 600 ssh_key
      #     ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo Connected!"
      #   shell: bash

      # 3. Sensor Monitoring FE CI/CD
      - name: Sensor Monitoring FE CI/CD
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status
            cd /var/www/html/sensor-monitoring
            git pull origin main
            composer install

      # 4. Send success notification via custom API
      - name: Send Telegram Notification
        if: success()
        run: |
          curl -s -X POST https://telebot.apicollection.my.id/api/v1/cicd/send-message \
          -H "Content-Type: application/json" \
          -d '{"message": "âœ… Task Succeeded\n${{ github.event.head_commit.message }}\nMonitoring FE Deployed to Production\nBy: ${{ github.event.head_commit.committer.name }}", , "channel": "@cicd_sensor"}'
      # 5. Cleanup
      - name: Remove SSH Key
        if: always()
        run: rm -f ssh_key
